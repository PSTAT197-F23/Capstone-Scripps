abline(h = 2 * p/n, col = "orange")
abline(h = 3 * p/n, col = "red")
CIs <- cbind(summary(model)$coefficients[, 1] + c(1, -1) * qt(0.975, model$df.residual) * summary(model)$coefficents[, 2])
CIs
CIs <- cbind(summary(model)$coefficients[, 1] - qt(0.975, model$df.residual) * summary(model)$coefficents[, 2],
summary(model)$coefficients[, 1] + qt(0.975, model$df.residual) * summary(model)$coefficents[, 2] )
CIs
summary(model)$coefficients[, 1]
summary(model)$coefficients[, 1] - qt(0.975, model$df.residual) * summary(model)$coefficents[, 2]
summary(model)$coefficents[, 2]
summary(model)$coefficients
summary(model)$coefficients[, 1]
confint(model)
summary(model)$coefficients[, 0]
summary(model)$coefficients[, 1]
summary(model)$coefficents[, 2]
summary(model)$coefficients[, 2]
CIs <- cbind(summary(model)$coefficients[, 1] - qt(0.975, model$df.residual) * summary(model)$coefficients[, 2],
summary(model)$coefficients[, 1] + qt(0.975, model$df.residual) * summary(model)$coefficients[, 2])
CIs <- cbind(summary(model)$coefficients[, 1] - qt(0.975, model$df.residual) * summary(model)$coefficients[, 2],
summary(model)$coefficients[, 1] + qt(0.975, model$df.residual) * summary(model)$coefficients[, 2]);CIS
CIs <- cbind(summary(model)$coefficients[, 1] - qt(0.975, model$df.residual) * summary(model)$coefficients[, 2],
summary(model)$coefficients[, 1] + qt(0.975, model$df.residual) * summary(model)$coefficients[, 2]);CIs
pred.y0 <- t(Solution.vector)%*%model$coefficients
pred.y0 <- t(x0.vector)%*%model$coefficients
x0 <- cbind(rep(1, length(Solution)), Solution$concentration)
pred.y0 <- t(x0.vector)%*%model$coefficients
x0
x0 <- cbind(rep(1, length(Solution)), Solution$concentration)
pred.y0 <- t(x0)%*%model$coefficients
pred.y0 <- t(x0.matrix)%*%model$coefficients
predict(model, interval = "confidence")
predict(model, interval = "prediction")
knitr::opts_chunk$set(echo = TRUE)
1/750
3/1500
knitr::opts_chunk$set(echo = TRUE)
cars <- read.table(file = "cars.txt", head = T)
seq <- seq(0, length(cars), by = 15)
seq
cars
length(cars)
dim(cars)
seq <- seq(0, dim(cars)[1], by = 15)
test.sample <- cars[-seq, ]
test.sample
train.sample <- cars[seq,]
train.sample
require(glmnet)
require(glmnet)
data(state)
statedata<- data.frame(state.x77, row.names =state.abb)
statedata
state.x77
statedata<- data.frame(state.x77, row.names =state.abb)
y <- statedata$Life
x <- scale(data.matrix(statedata[,-4]))
cv_model <- cv.glmnet(x, y, alpha = 1)
cv_model
x
statedata<- data.frame(state.x77, row.names =state.abb)
statedata
cv_model
cv_model <- cv.glmnet(x, y, alpha = 1, lamda = 0.01)
cv_model
cv_model <- cv.glmnet(x, y, alpha = 1, lamda = 1);cv_model
cv_model <- cv.glmnet(x, y, alpha = 1);cv_model
?cv.glmnet
glmnet()
?glmnet()
grid = 10^seq(10, -2, length = 100)
lasso.mod <- glmnet(x, y, alpha=1, lambda=grid)
plot(lasso.mod, xvar="lambda", label = TRUE)
lasso.mod
plot(lasso.mod, xvar="lambda", label = TRUE)
lasso.mod <- glmnet(x, y, alpha=1)
plot(lasso.mod, xvar="lambda", label = TRUE)
data.matrix(statedata[,-4])
cv_model <- cv.glmnet(x, y, alpha = 1);cv_model
plot(cv_model)
cv_model <- cv.glmnet(x, y, alpha = 1);cv_model
plot(cv_model)
plot(cv_model, cex = 0.8)
par(mar = c(7, 4, 2.2, 0.5));plot(cv_model)
require(glmnet)
data(state)
statedata<- data.frame(state.x77, row.names =state.abb)
y <- statedata$Life
x <- scale(data.matrix(statedata[,-4]))
cv_model <- cv.glmnet(x, y, alpha = 1);cv_model
par(mar = c(7, 4, 2.2, 0.5));plot(cv_model)
par(mar = c(7, 4, 2.2, 0.5));plot(cv_model, cex=0.8)
cv_model <- cv.glmnet(x, y, alpha = 1, lambda = grid);cv_model
plot(cv_model)
cv_model <- cv.glmnet(x, y, alpha = 1);cv_model
plot(cv_model)
require(glmnet)
data(state)
statedata<- data.frame(state.x77, row.names =state.abb)
y <- statedata$Life
x <- scale(data.matrix(statedata[,-4]))
x
cv_model <- cv.glmnet(x, y, alpha = 1);cv_model
cv_model <- cv.glmnet(x, y, alpha = 1, lambda = 1);cv_model
4.69 + qt(c(0.25, 0.975), 33) * 2.98
4.69 + qt(c(0.025, 0.975), 33) * 2.98
pf(5, 4, 51)
1-pf(5, 4, 51)
1-pf(3, 3, 51)
4.69 + qt(c(0.025, 0.975), 38) * 2.98
1-pf(1, 3, 51)
cars <- read.table(file = "cars.txt", head = T)
seq <- seq(0, dim(cars)[1], by = 15)
test.sample <- cars[-seq, ]
train.sample <- cars[seq,]
pairs(train.sample)
pair(train.sample)
library("MASS")
pair(train.sample)
pairs(train.sample)
library("alr4")
pairs(train.sample)
library("MASS")
pairs(train.sample)
cars <- read.table(file = "cars.txt", head = T)
seq <- seq(0, dim(cars)[1], by = 15)
test.sample <- cars[-seq, ]
train.sample <- cars[seq,]
library("MASS")
pairs(train.sample)
train.sample
pairs(train.sample[-1])
pairs(train.sample[,-1])
library("MASS")
par(mfrow=c(3,4))
plot(train.sample$mgp, train.sample$cyl)
plot(train.sample$mgp, train.sample$cyl)
cars <- read.table(file = "cars.txt", head = T)
seq <- seq(0, dim(cars)[1], by = 15)
test.sample <- cars[-seq, ]
train.sample <- cars[seq,]
cars[is.na(cars)]
test.sample <- cars[-seq, ]
train.sample <- cars[seq,]
plot(train.sample$mgp, train.sample$cyl)
train.sample$mgp
train.sample
plot(test.sample$mgp, test.sample$cyl)
test.sample <- cars[-seq, ]
test.sample
plot(test.sample$mgp, test.sample$cyl)
plot(test.sample$mgp)
test.sample$mgp
test.sample$name
test.sample$mpg
plot(test.sample$mgp, test.sample$cyl)
cars <- read.table(file = "cars.txt", head = T)
seq <- seq(0, dim(cars)[1], by = 15)
cars[is.na(cars)]
test.sample <- cars[-seq, ]
train.sample <- cars[seq,]
test.sample$mpg
plot(test.sample$mgp, test.sample$cyl)
plot(test.sample$mgp, test.sample$cyl)
plot(test.sample$mpg, test.sample$cyl)
plot(test.sample$mpg, test.sample$disp)
plot(test.sample$mpg, test.sample$hp)
plot(test.sample$mpg, test.sample$drat)
plot(test.sample$mpg, test.sample$wt)
library("MASS")
par(mfrow=c(3,4))
plot(test.sample$mpg, test.sample$cyl)
plot(test.sample$mpg, test.sample$disp)
plot(test.sample$mpg, test.sample$hp)
plot(test.sample$mpg, test.sample$drat)
plot(test.sample$mpg, test.sample$wt)
plot(test.sample$mpg, test.sample$qsec)
plot(test.sample$mpg, test.sample$vs)
plot(test.sample$mpg, test.sample$am)
plot(test.sample$mpg, test.sample$gear)
plot(test.sample$mpg, test.sample$carb)
library("MASS")
par(mfrow=c(4,3))
plot(test.sample$mpg, test.sample$cyl)
plot(test.sample$mpg, test.sample$disp)
plot(test.sample$mpg, test.sample$hp)
plot(test.sample$mpg, test.sample$drat)
plot(test.sample$mpg, test.sample$wt)
plot(test.sample$mpg, test.sample$qsec)
plot(test.sample$mpg, test.sample$vs)
plot(test.sample$mpg, test.sample$am)
plot(test.sample$mpg, test.sample$gear)
plot(test.sample$mpg, test.sample$carb)
library("MASS")
par(mfrow=c(3,4))
plot(test.sample$mpg, test.sample$cyl)
plot(test.sample$mpg, test.sample$disp)
plot(test.sample$mpg, test.sample$hp)
plot(test.sample$mpg, test.sample$drat)
plot(test.sample$mpg, test.sample$wt)
plot(test.sample$mpg, test.sample$qsec)
plot(test.sample$mpg, test.sample$vs)
plot(test.sample$mpg, test.sample$am)
plot(test.sample$mpg, test.sample$gear)
plot(test.sample$mpg, test.sample$carb)
library("MASS")
par(mfrow=c(3,4))
plot(test.sample$cyl, test.sample$mpg)
plot(test.sample$disp, test.sample$mpg)
plot(test.sample$hp, test.sample$mpg)
plot(test.sample$drat, test.sample$mpg)
plot(test.sample$wt, test.sample$mpg)
plot(test.sample$qsec, test.sample$mpg)
plot(test.sample$vs, test.sample$mpg)
plot(test.sample$am, test.sample$mpg)
plot(test.sample$gear, test.sample$mpg)
plot(test.sample$carb, test.sample$mpg)
par(mfrow=c(3,4))
boxplot(test.sample$cyl)
boxplot(test.sample$disp)
boxplot(test.sample$hp)
boxplot(test.sample$drat)
boxplot(test.sample$wt)
boxplot(test.sample$qsec)
boxplot(test.sample$vs)
boxplot(test.sample$am)
boxplot(test.sample$gear)
boxplot(test.sample$carb)
par(mfrow=c(3,4))
boxplot(test.sample$cyl, xlab = "cyl")
boxplot(test.sample$disp, xlab = "disp")
boxplot(test.sample$hp, xlab = "hp")
boxplot(test.sample$drat, xlab = "drat")
boxplot(test.sample$wt, xlab = "wt")
boxplot(test.sample$qsec, xlab = "qsec")
boxplot(test.sample$vs, xlab = "vs")
boxplot(test.sample$am, xlab = "am")
boxplot(test.sample$gear, xlab = "gear")
boxplot(test.sample$carb, xlab = "carb")
full.model <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am +gear + carb, data = test.sample)
full.model <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am +gear + carb, data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2,4,5))
plot(full.model, c(1,2,4,3))
plot(full.model, c(1,2,4,5))
full.model <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am +gear + carb, data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2,4,5))
acf(residuals(full.model), type = "partial")
full.model <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am +gear + carb, data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
acf(residuals(full.model), type = "partial")
lev = hatvalues(full.model)
n <- length(lev)
p <- dim(model.matrix(full.model))
data  = data.frame(index = seq(n), leverage = lev)
plot(leverage ~ index, col = "white", data = data, pch = NULL)
text(leverage ~ index ,  labels = index, data = data, cex = 0.9, font = 2)
abline(h = p/n, col = "blue")
abline(h = 2*p/n, col = "red")
boxcox(full.model, plotit = T, lamda = seq(-1, 1, len = 100))
rs <- summary(full.model)
AIC <- n * log(rs$rss/n) + 2 * seq(2, p, 1)
log(rs$rss/n)
rs <- summary(full.model)
rs
stepAIC(full.model, direction = "backward", k = 2)
AIC.model <- lm(formula = mpg ~ wt + qsec + am, data = test.sample)
AIC.model <- lm(formula = mpg ~ wt + qsec + am, data = test.sample)
stepBIC(full.model, direction = "backward", k = 2)
stepAIC(full.model, direction = "backward", k = log(n))
stepAIC(full.model, direction = "backward", k = log(n))
stepAIC(full.model, direction = "backward", k = 2)
AIC.model <- lm(formula = mpg ~ wt + qsec + am, data = test.sample)
full.model <- lm(mpg ~ ., data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
full.model <- lm(mpg ~ ., data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
full.model = lm(mpg~., data = test.sample)
full.model = lm(mpg~., data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
full.model <- lm(mpg~., data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
full.model <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am +gear + carb, data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
acf(residuals(full.model), type = "partial")
lev = hatvalues(full.model)
n <- length(lev)
p <- dim(model.matrix(full.model))
data  = data.frame(index = seq(n), leverage = lev)
plot(leverage ~ index, col = "white", data = data, pch = NULL)
text(leverage ~ index ,  labels = index, data = data, cex = 0.9, font = 2)
abline(h = p/n, col = "blue")
abline(h = 2*p/n, col = "red")
full.model <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am +gear + carb, data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
acf(residuals(full.model), type = "partial")
lev = hatvalues(full.model)
n <- length(lev)
p <- dim(model.matrix(full.model))
data  = data.frame(index = seq(n), leverage = lev)
plot(leverage ~ index, col = "white", data = data, pch = NULL)
text(leverage ~ index ,  labels = index, data = data, cex = 0.9, font = 2)
abline(h = p/n, col = "blue")
abline(h = 2*p/n, col = "red")
full.model = lm(mpg~., data = test.sample)
boxcox(full.model, plotit = T, lamda = seq(-1, 1, len = 100))
full.model <- lm(mpg~., data = test.sample)
boxcox(full.model, plotit = T, lamda = seq(-1, 1, len = 100))
full.model <- lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + factor(vs) + factor(am) + factor(gear) + factor(carb), data = test.sample)
par(mfrow = c(2,2))
plot(full.model, c(1,2))
acf(residuals(full.model), type = "partial")
lev = hatvalues(full.model)
n <- length(lev)
p <- dim(model.matrix(full.model))
data  = data.frame(index = seq(n), leverage = lev)
plot(leverage ~ index, col = "white", data = data, pch = NULL)
text(leverage ~ index ,  labels = index, data = data, cex = 0.9, font = 2)
abline(h = p/n, col = "blue")
abline(h = 2*p/n, col = "red")
boxcox(full.model, plotit = T, lamda = seq(-1, 1, len = 100))
stepAIC(full.model, direction = "backward", k = 2)
stepAIC(full.model, direction = "backward", k = log(n))
library(glmnet)
y <- test.sample$mpg
x <- scale(test.sample[,-1])
cv_model <- cv.glmnet(x, y, alpha = 0)
best_lamda <- cv_model$lambda.min
best.model <- glmnet(x, y, alpha = 0, lambda = best_lamda)
coef(best.model)
pre <- predict(train.model, newdata = train.sample, interval = "prediction")
cars <- read.table(file = "cars.txt", head = T)
seq <- seq(0, dim(cars)[1], by = 15)
cars[is.na(cars)]
test.sample <- cars[-seq, ]
train.sample <- cars[seq,]
test.sample$mpg
train.sample
train.model <- lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + factor(vs) + factor(am) + factor(gear) + factor(carb), data = train.sample)
train.model <- lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + factor(vs) + factor(am) + factor(gear) + factor(carb), data = train.sample)
train.sample
train.model <- lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + factor(vs) + factor(am) + factor(gear) + factor(carb), data = train.sample)
train.model <- lm(mpg ~ ., data = train.sample)
pre <- predict(train.model, newdata = train.sample, interval = "prediction")
AIC.pre <- predict(AIC.model, newdata = train.sample, interval = "prediction")
BIC.pre <- predict(BIC.model, newdata = train.sample, interval = "prediction")
train.model <- lm(mpg ~ ., data = train.sample)
pre <- predict(train.model, newdata = train.sample, interval = "prediction")
AIC.pre <- predict(AIC.model, newdata = train.sample, interval = "prediction")
R.pre <- predict(best.model, newx = scale(train.sample[, -1]), interval = "prediction", s = best_lamda)
mean(pre[,3] - pre[,2]) #prediction interval for full model
mean(AIC.pre[,3] - AIC.pre[,2]) # for AIC model
mean(BIC.pre[,3] - BIC.pre[,2]) #for BIC model
train.model <- lm(mpg ~ ., data = train.sample)
pre <- predict(train.model, newdata = train.sample, interval = "prediction")
AIC.pre <- predict(AIC.model, newdata = train.sample, interval = "prediction")
R.pre <- predict(best.model, newx = scale(train.sample[, -1]), interval = "prediction", s = best_lamda)
mean(pre[,3] - pre[,2]) #prediction interval for full model
mean(AIC.pre[,3] - AIC.pre[,2]) # for AIC model
R.pre <- predict(best.model, newx = scale(train.sample[, -1]), interval = "prediction", s = best_lamda)
mean(pre[,3] - pre[,2]) #prediction interval for full model
pre
AIC.pre
pre
train.model <- lm(mpg ~ ., data = train.sample)
summary(train.model)
train.sample
summary(train.model)
train.model <- lm(mpg ~ ., data = train.sample)
pre <- predict(train.model, newdata = train.sample, interval = "prediction")
AIC.pre <- predict(AIC.model, newdata = train.sample, interval = "prediction")
R.pre <- predict(best.model, newx = scale(train.sample[, -1]), interval = "prediction", s = best_lamda)
pre
AIC.pre
R.pre
R.pre
best.model <- glmnet(x, y, alpha = 0, lambda = best_lamda)
summary(best.model)
matrix(data = train.sample)
R.pre
best_lamda
scale(train.sample[, -1])
best.model
R.pre <- predict(best.model, newx = scale(train.sample[, -1]), interval = "prediction", s = best_lamda)
R.pre
pre
AIC.pre
coef(best.model)
matraix(data = train.sample)
matrix(data = train.sample)
matrix(data = train.sample[1])
train.sample[1]
train.sample[1,]
matrix(data = train.sample[1,-1])
R.pre.15 <- coef(best.model) %*%
(data = train.sample[1,-1])
pre <- predict(full.model, newdata = train.sample, interval = "prediction")
full.model <- lm(mpg ~ ., data = test.sample)
train.model <- lm(mpg ~ ., data = train.sample)
pre <- predict(full.model, newdata = train.sample, interval = "prediction")
train.sample[1,-1
train.sample[1,-1]
train.sample[1,-1]
R.pre.15 <- coef(best.model) %*% matrix(train.sample[1,-1])
matrix(train.sample[1,-1])
R.pre.15 <- coef(best.model) %*% t(matrix(train.sample[1,-1]))
R.pre.15 <- coef(best.model) %*% t(matrix(train.sample[1,-1]))
pre <- predict(full.model, newdata = train.sample, interval = "prediction")
pre <- predict(full.model, newdata = train.sample[-1], interval = "prediction")
pre <- predict(full.model, newdata = train.sample[-1], interval = "prediction")
train.model <- lm(mpg ~ ., data = train.sample[-1])
full.model <- lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + factor(vs) + factor(am) + factor(gear) + factor(carb), data = test.sample)
train.model <- lm(mpg ~ ., data = train.sample[-1])
pre <- predict(full.model, newdata = train.sample[-1], interval = "prediction")
train.model <- lm(mpg ~ factor(cyl) + disp + hp + drat + wt + qsec + factor(vs) + factor(am) + factor(gear) + factor(carb), data = train.sample)
train.model <- lm(mpg ~ ., data = train.sample[-1]), data = test.sample)
train.model <- lm(mpg ~ ., data = train.sample[-1])
pre <- predict(full.model, newdata = train.sample[-1], interval = "prediction")
full.model <- lm(mpg ~ ., data = test.sample[-1])
t(matrix(train.sample[1,-1]))
R.pre.15 <- matrix(coef(best.model)) %*% t(matrix(train.sample[1,-1]))
matrix(coef(best.model))
t(matrix(train.sample[1,-1]))
R.pre.15 <- matrix(coef(best.model)) %*% t(matrix(c(1,train.sample[1,-1])))
matrix(c(1,train.sample[1,-1]))
t(matrix(c(1,train.sample[1,-1])))
matrix(coef(best.model))
matrix(coef(best.model)) %*% t(matrix(c(1,train.sample[1,-1])))
pre <- predict(full.model, newdata = train.sample[-1], interval = "prediction")
pre
AIC.pre
train.model <- lm(mpg ~ ., data = train.sample[-1])
pre <- predict(full.model, newdata = train.sample[-1], interval = "prediction")
AIC.pre <- predict(AIC.model, newdata = train.sample, interval = "prediction")
mean(pre[,3] - pre[,2]) #prediction interval for full model
mean(AIC.pre[,3] - AIC.pre[,2]) # for AIC model
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
mpg %>%
ggplot(aes(x = hwy)) + geom_histogram()
mpg %>%
ggplot(aes(x = hwy, y = cty)) + geom_point()
manufacturer
print(manufacturer)
hwy
mpg
mpg$manufacturer
frequency(mpg$manufacturer)
freq(mpg$manufacturer)
barplot(mpg$manufacturer)
histogram(mpg$manufacturer)
hist(mpg$manufacturer)
table(mpg$manufacturer)
ggplot(mpg, aes(x = table(manufacturer), y= manufacturer)) + geom_histogram()
ggplot(mpg, aes(x = cty, y= manufacturer)) + geom_histogram()
ggplot(mpg, aes(x = freq(manufacturer), y= manufacturer)) + geom_histogram()
ggplot(mpg, aes(x = infreq(manufacturer), y= manufacturer)) + geom_histogram()
table(mpg$manufacturer)
table(mpg$manufacturer)[0,]
mpg$manufacturer
table(mpg$manufacturer)[0]
table(mpg$manufacturer)[1]
table(mpg$manufacturer)[1,]
table(mpg$manufacturer)[name]
table(mpg$manufacturer)[1]
table(mpg$manufacturer)[1,]
table(mpg$manufacturer)[,1]
ggplot(mpg, aes(x = as.numeric(table(mpg$manufacturer)), y= names(table(mpg$manufacturer)))) + geom_histogram()
ggplot(mpg, aes(x = as.numeric(table(manufacturer)), y= names(table(manufacturer)))) + geom_histogram()
ggplot(mpg, aes(x = as.numeric(table(manufacturer)), y= names(table(manufacturer)))) + geom_bar()
as.numeric(table(mpg$manufacturer))
names(table(mpg$manufacturer))
ggplot(mpg, aes(x = as.numeric(table(manufacturer)), y= names(table(manufacturer)))) + geom_bar()
names(table(mpg$manufacturer))
as.numeric(table(mpg$manufacturer))
ggplot(mpg, aes(x = as.numeric(table(manufacturer)), y= names(table(manufacturer))))
ggplot(mpg, aes(x = forcats:::fct_infreq(manufacturer))) +geom_bar() +coord_flip
mpg %>%
ggplot(aes(x = forcats:::fct_infreq(manufacturer))) +geom_bar() +coord_flip
mpg %>%
ggplot(aes(x = forcats:::fct_infreq(manufacturer))) +geom_bar() +coord_flip()
mpg %>%
ggplot(aes(x = hwy, y = factor(cyl))) + geom_boxplot()
mpg %>%
select(is.numeric) %>%
cor() %>%
corrplot(type = "lower", diag = F, method = "color")
library(tidyverse)
library(ggplot2)
library(tidymodels)
install.packages(c("bit", "boot", "broom", "bslib", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "foreign", "ggplot2", "highr", "Hmisc", "htmltools", "htmlwidgets", "isoband", "jpeg", "jsonlite", "knitr", "locpol", "lubridate", "nlme", "openssl", "pbkrtest", "png", "purrr", "Rcpp", "rmarkdown", "sass", "stringi", "stringr", "survival", "testthat", "timechange", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "boot", "broom", "bslib", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "foreign", "ggplot2", "highr", "Hmisc", "htmltools", "htmlwidgets", "isoband", "jpeg", "jsonlite", "knitr", "locpol", "lubridate", "nlme", "openssl", "pbkrtest", "png", "purrr", "Rcpp", "rmarkdown", "sass", "stringi", "stringr", "survival", "testthat", "timechange", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bit", "boot", "broom", "bslib", "cli", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "foreign", "ggplot2", "highr", "Hmisc", "htmltools", "htmlwidgets", "isoband", "jpeg", "jsonlite", "knitr", "locpol", "lubridate", "nlme", "openssl", "pbkrtest", "png", "purrr", "Rcpp", "rmarkdown", "sass", "stringi", "stringr", "survival", "testthat", "timechange", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages("tidymodels")
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
# package install list
url <- 'https://raw.githubusercontent.com/PSTAT197-F23/pstat197a/main/materials/scripts/package-installs.R'
source(url)
library(tidyverse)
shiny::runApp('PSTAT 197a/labs/Capstone-Scripps')
